Private Sub importer_Click()
    Dim dossier As String
    Dim listeFichiers As Collection
    Dim fichier As Variant
    Dim tabFinal() As Variant
    Dim i As Long
    
    ' Choisir un dossier
    With Application.FileDialog(msoFileDialogFolderPicker)
        .Title = "Sélectionnez le dossier contenant les fichiers Excel"
        If .Show <> -1 Then Exit Sub
        dossier = .SelectedItems(1)
    End With

    ' Liste des fichiers Excel
    Set listeFichiers = New Collection
    Call ParcourirDossier(dossier, listeFichiers)

    ' Préparer tableau résultat à 3 colonnes
    ReDim tabFinal(1 To listeFichiers.Count, 1 To 3)

    i = 1
    Dim chemin As String
    Dim elements() As String
    Dim produit As String
    Dim reseau_dist As String
    Dim nomFichier As String

    For Each fichier In listeFichiers
        chemin = fichier
        elements = Split(chemin, "\")
        
        nomFichier = elements(UBound(elements)) ' nom du fichier
        produit = elements(UBound(elements) - 1) ' nom du dossier qui contient le fichier
        reseau_dist = elements(UBound(elements) - 2) ' dossier au-dessus (grand-parent)

        tabFinal(i, 1) = reseau_dist
        tabFinal(i, 2) = produit
        tabFinal(i, 3) = nomFichier
        i = i + 1
    Next

    ' (Optionnel) Afficher dans une nouvelle feuille Excel
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets.Add
    ws.Name = "Fichiers importés"

    ws.Cells(1, 1).Value = "Réseau_dist"
    ws.Cells(1, 2).Value = "Produit"
    ws.Cells(1, 3).Value = "Fichier"

    ws.Range("A2").Resize(UBound(tabFinal), 3).Value = tabFinal

    MsgBox listeFichiers.Count & " fichiers traités et listés avec succès.", vbInformation
End Sub


Private Sub ParcourirDossier(ByVal chemin As String, ByRef fichiers As Collection)
    Dim fso As Object, dossier As Object, sousDossier As Object, fichier As Object
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set dossier = fso.GetFolder(chemin)

    For Each fichier In dossier.Files
        If LCase(fso.GetExtensionName(fichier.Name)) = "xlsx" Then
            fichiers.Add fichier.Path
        End If
    Next

    For Each sousDossier In dossier.SubFolders
        Call ParcourirDossier(sousDossier.Path, fichiers)
    Next
End Sub




'##################################Importation des données de 2024###################################################
'####################################################################################################################
'####################################################################################################################

Private Sub importer_2024()
    Dim dossier As String
    Dim listeFichiers As Collection
    Dim fichier As Variant
    Dim tabFinal() As Variant
    Dim i As Long
    
    ' Choisir un dossier
    With Application.FileDialog(msoFileDialogFolderPicker)
        .Title = "Sélectionnez le dossier contenant les fichiers Excel"
        If .Show <> -1 Then Exit Sub
        dossier = .SelectedItems(1)
    End With

    ' Liste des fichiers Excel
    Set listeFichiers = New Collection
    Call ParcourirDossier(dossier, listeFichiers)

    ' Préparer tableau résultat à 3 colonnes
    ReDim tabFinal(1 To listeFichiers.Count, 1 To 3)

    i = 1
    Dim chemin As String
    Dim elements() As String
    Dim produit As String
    Dim reseau_dist As String
    Dim nomFichier As String

    For Each fichier In listeFichiers
        chemin = fichier
        elements = Split(chemin, "\")
        
        nomFichier = elements(UBound(elements)) ' nom du fichier
        produit = elements(UBound(elements) - 1) ' nom du dossier qui contient le fichier
        reseau_dist = elements(UBound(elements) - 2) ' dossier au-dessus (grand-parent)

        tabFinal(i, 1) = reseau_dist
        tabFinal(i, 2) = produit
        tabFinal(i, 3) = nomFichier
        i = i + 1
    Next

    ' (Optionnel) Afficher dans une nouvelle feuille Excel
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets.Add
    ws.Name = "Fichiers importés"

    ws.Cells(1, 1).Value = "Réseau_dist"
    ws.Cells(1, 2).Value = "Produit"
    ws.Cells(1, 3).Value = "Fichier"

    ws.Range("A2").Resize(UBound(tabFinal), 3).Value = tabFinal

    MsgBox listeFichiers.Count & " fichiers traités et listés avec succès.", vbInformation
End Sub


Private Sub ParcourirDossier(ByVal chemin As String, ByRef fichiers As Collection)
    Dim fso As Object, dossier As Object, sousDossier As Object, fichier As Object
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set dossier = fso.GetFolder(chemin)

    For Each fichier In dossier.Files
        If LCase(fso.GetExtensionName(fichier.Name)) = "xlsx" Then
            fichiers.Add fichier.Path
        End If
    Next

    For Each sousDossier In dossier.SubFolders
        Call ParcourirDossier(sousDossier.Path, fichiers)
    Next
End Sub



'##################################Importation des données de 2023###################################################
'####################################################################################################################
'####################################################################################################################



Private Sub importer_2023()
    Dim dossier As String
    Dim listeFichiers As Collection
    Dim fichier As Variant
    Dim tabFinal() As Variant
    Dim i As Long
    
    ' Choisir un dossier
    With Application.FileDialog(msoFileDialogFolderPicker)
        .Title = "Sélectionnez le dossier contenant les fichiers Excel"
        If .Show <> -1 Then Exit Sub
        dossier = .SelectedItems(1)
    End With

    ' Liste des fichiers Excel
    Set listeFichiers = New Collection
    Call ParcourirDossier(dossier, listeFichiers)

    ' Préparer tableau résultat à 3 colonnes
    ReDim tabFinal(1 To listeFichiers.Count, 1 To 3)

    i = 1
    Dim chemin As String
    Dim elements() As String
    Dim produit As String
    Dim reseau_dist As String
    Dim nomFichier As String

    For Each fichier In listeFichiers
        chemin = fichier
        elements = Split(chemin, "\")
        
        nomFichier = elements(UBound(elements)) ' nom du fichier
        produit = elements(UBound(elements) - 1) ' nom du dossier qui contient le fichier
        reseau_dist = elements(UBound(elements) - 2) ' dossier au-dessus (grand-parent)

        tabFinal(i, 1) = reseau_dist
        tabFinal(i, 2) = produit
        tabFinal(i, 3) = nomFichier
        i = i + 1
    Next

    ' (Optionnel) Afficher dans une nouvelle feuille Excel
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets.Add
    ws.Name = "Fichiers importés"

    ws.Cells(1, 1).Value = "Réseau_dist"
    ws.Cells(1, 2).Value = "Produit"
    ws.Cells(1, 3).Value = "Fichier"

    ws.Range("A2").Resize(UBound(tabFinal), 3).Value = tabFinal

    MsgBox listeFichiers.Count & " fichiers traités et listés avec succès.", vbInformation
End Sub








'##################################################################
' Importation rapide des données de 2023 pour plus de 1000 fichiers
'##################################################################

Private Sub importer_2023()
    Dim dossier As String
    Dim listeFichiers As Collection
    Dim fichier As Variant
    Dim tabFinal As Object ' Dictionnaire pour tab((k,l),(i,j))
    Dim keyKL As String
    Dim xlApp As Object ' Application Excel
    Dim wb As Object ' Classeur
    Dim ws As Object ' Feuille
    Dim i As Long, j As Long
    Dim rowCount As Long, colCount As Long
    Dim chemin As String
    Dim elements() As String
    Dim produit As String
    Dim reseau_dist As String
    Dim startTime As Double
    
    ' Mesurer le temps d'exécution
    startTime = Timer
    
    ' Initialiser le dictionnaire
    Set tabFinal = CreateObject("Scripting.Dictionary")
    
    ' Choisir un dossier
    With Application.FileDialog(msoFileDialogFolderPicker)
        .Title = "Sélectionnez le dossier contenant les fichiers Excel"
        If .Show <> -1 Then Exit Sub
        dossier = .SelectedItems(1)
    End With
    
    ' Liste des fichiers Excel
    Set listeFichiers = New Collection
    Call ParcourirDossier(dossier, listeFichiers)
    
    ' Initialiser l'application Excel
    Set xlApp = Application ' Utiliser l'instance actuelle d'Excel
    
    ' Parcourir chaque fichier
    For Each fichier In listeFichiers
        chemin = fichier
        elements = Split(chemin, "\")
        
        ' Extraire réseau et produit
        produit = elements(UBound(elements) - 1) ' Dossier produit
        reseau_dist = elements(UBound(elements) - 2) ' Dossier réseau
        
        ' Clé unique pour (k,l)
        keyKL = reseau_dist & "_" & produit
        
        ' Ouvrir le fichier Excel
        On Error Resume Next
        Set wb = xlApp.Workbooks.Open(chemin, ReadOnly:=True)
        If wb Is Nothing Then
            MsgBox "Impossible d'ouvrir le fichier : " & chemin, vbCritical
            GoTo NextFile
        End If
        On Error GoTo 0
        
        ' Accéder à la première feuille (ajustez si nécessaire)
        Set ws = wb.Sheets(1) ' Ou spécifiez le nom : wb.Sheets("Sheet1")
        
        ' Obtenir les dimensions
        rowCount = ws.UsedRange.Rows.Count
        colCount = ws.UsedRange.Columns.Count
        
        ' Initialiser le tableau pour les données (i,j)
        Dim dataIJ() As Variant
        ReDim dataIJ(1 To rowCount, 1 To colCount)
        
        ' Lire les données
        For i = 1 To rowCount
            For j = 1 To colCount
                dataIJ(i, j) = ws.Cells(i, j).Value
            Next j
        Next i
        
        ' Stocker dans le dictionnaire
        tabFinal(keyKL) = dataIJ
        
        ' Fermer le classeur
        wb.Close SaveChanges:=False
        
NextFile:
    Next
    
    ' (Optionnel) Afficher un résumé dans une feuille
    Dim wsSummary As Worksheet
    Set wsSummary = ThisWorkbook.Sheets.Add
    wsSummary.Name = "Résumé Importation"
    
    wsSummary.Cells(1, 1).Value = "Réseau"
    wsSummary.Cells(1, 2).Value = "Produit"
    wsSummary.Cells(1, 3).Value = "Lignes"
    wsSummary.Cells(1, 4).Value = "Colonnes"
    
    i = 2
    For Each keyKL In tabFinal.Keys
        elements = Split(keyKL, "_")
        wsSummary.Cells(i, 1).Value = elements(0) ' Réseau
        wsSummary.Cells(i, 2).Value = elements(1) ' Produit
        wsSummary.Cells(i, 3).Value = UBound(tabFinal(keyKL), 1) ' Lignes
        wsSummary.Cells(i, 4).Value = UBound(tabFinal(keyKL), 2) ' Colonnes
        i = i + 1
    Next
    
    ' Afficher le temps d'exécution
    MsgBox listeFichiers.Count & " fichiers traités en " & Round(Timer - startTime, 2) & " secondes.", vbInformation
End Sub

' Fonction pour parcourir les fichiers Excel dans un dossier et sous-dossiers
Private Sub ParcourirDossier(ByVal dossier As String, ByRef listeFichiers As Collection)
    Dim fso As Object
    Dim dossierObj As Object
    Dim fichierObj As Object
    Dim sousDossierObj As Object
    
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set dossierObj = fso.GetFolder(dossier)
    
    ' Ajouter les fichiers Excel
    For Each fichierObj In dossierObj.Files
        If LCase(fso.GetExtensionName(fichierObj.Name)) = "xlsx" Or LCase(fso.GetExtensionName(fichierObj.Name)) = "xls" Then
            listeFichiers.Add fichierObj.Path
        End If
    Next
    
    ' Parcourir les sous-dossiers
    For Each sousDossierObj In dossierObj.SubFolders
        ParcourirDossier sousDossierObj.Path, listeFichiers
    Next
End Sub

Sub CalculDesDeciles()
    Dim tab(1 To 5, 1 To 4) As Double
    Dim temp() As Double
    Dim i As Long, j As Long, k As Long
    Dim n As Long
    Dim D1 As Double, D9 As Double

    ' Remplir le tableau 2D avec des données fictives (valeurs entre 0 et 100)
    For i = 1 To 5
        For j = 1 To 4
            tab(i, j) = Rnd() * 100
        Next j
    Next i

    ' Convertir en tableau 1D pour l’analyse
    n = (UBound(tab, 1) - LBound(tab, 1) + 1) * (UBound(tab, 2) - LBound(tab, 2) + 1)
    ReDim temp(1 To n)

    k = 1
    For i = LBound(tab, 1) To UBound(tab, 1)
        For j = LBound(tab, 2) To UBound(tab, 2)
            temp(k) = tab(i, j)
            k = k + 1
        Next j
    Next i

    ' Calcul des déciles
    D1 = Application.WorksheetFunction.Percentile_Inc(temp, 0.1) ' 1er décile = 10%
    D9 = Application.WorksheetFunction.Percentile_Inc(temp, 0.9) ' 9e décile = 90%

    MsgBox "1er décile (D1) : " & Format(D1, "0.00") & vbCrLf & _
           "9e décile (D9) : " & Format(D9, "0.00")
End Sub

