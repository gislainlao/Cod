
Dim ligne_debut As Integer: Dim colonne_debut As Integer
Dim ligne_fin As Integer: Dim colonne_fin As Integer

Private Sub UserForm_Initialize()
Call warn
End Sub


Private Sub warn()
Me.Label1.BackColor = RGB(0, 0, 143)
Me.Frame1.BackColor = RGB(0, 0, 143)
End Sub


Private Sub FERMER_Click()
formulaire.Hide
End Sub



Private Sub SUPRIMER_Click()
liste_fichiers.RemoveItem (liste_fichiers.ListIndex)
Nombre.Caption = liste_fichiers.ListCount & " " & "Fichiers"
End Sub

'##################################################################'
' Importation des données de l'année N-1 fichiers Excel            '
'##################################################################'
Private Sub Stat_N1_Click()

    Dim dossier As String
    Dim listeFichiers As Collection
    Dim fichier As Variant
    Dim keyKL As String
    Dim xlApp As Object
    Dim wb As Object
    Dim ws As Object
    Dim i As Long, j As Long
    Dim rowCount As Long, colCount As Long
    Dim chemin As String
    Dim elements() As String
    Dim produit As String
    Dim reseau_dist As String
    Dim startTime As Double
    Dim t As Long

    startTime = Timer
    
    ' Initialiser le dictionnaire
    Set tabFinal = CreateObject("Scripting.Dictionary")

    ' Choisir un dossier
    With Application.FileDialog(msoFileDialogFolderPicker)
        .Title = "Sélectionnez le dossier contenant les fichiers Excel"
        If .Show <> -1 Then Exit Sub
        dossier = .SelectedItems(1)
    End With
    
    Set listeFichiers = New Collection
    Call ParcourirDossier(dossier, listeFichiers)
    
    Set xlApp = Application
    
    ReDim tab_Key1(1 To listeFichiers.Count)
    ReDim nom_Feuille(1 To listeFichiers.Count)
    ReDim nom_produit(1 To listeFichiers.Count)
    ReDim nom_reseau(1 To listeFichiers.Count)
    ReDim tab_CLE(1 To listeFichiers.Count)
    ' Parcourir chaque fichier
    For Each fichier In listeFichiers
        chemin = fichier
        elements = Split(chemin, "\")

        feuille = elements(UBound(elements))
        feuille = Replace(feuille, ".xlsx", "")
        produit = elements(UBound(elements) - 1)
        reseau_dist = elements(UBound(elements) - 2)
        
        keyKL = reseau_dist & "_" & produit & "_" & feuille
        CLE = reseau_dist & "_" & produit
        t = t + 1
        tab_Key1(t) = keyKL
        tab_CLE(t) = CLE
        
        nom_Feuille(t) = feuille
        nom_produit(t) = produit
        nom_reseau(t) = reseau_dist

        On Error Resume Next
        Set wb = xlApp.Workbooks.Open(chemin, ReadOnly:=True)
        If wb Is Nothing Then
            MsgBox "Impossible d'ouvrir le fichier : " & chemin, vbCritical
            GoTo NextFile
        End If
        On Error GoTo 0
        
        For Each ws In wb.Sheets
            If ws.UsedRange.Cells.Count > 0 Then Exit For
        Next
        
        rowCount = ws.UsedRange.Rows.Count
        colCount = ws.UsedRange.Columns.Count
        
        ' Initialiser le tableau pour les données (i,j)
        Dim dataIJ() As Variant
        ReDim dataIJ(1 To rowCount, 1 To colCount)
        
        ' Lire les données
        For i = 1 To rowCount
            For j = 1 To colCount
                dataIJ(i, j) = ws.Cells(i, j).Value
            Next j
        Next i
        tabFinal(keyKL) = dataIJ
        
        wb.Close SaveChanges:=False
NextFile:
    Next

    nb_fichier_N1 = listeFichiers.Count
    Nombre_1.Caption = nb_fichier_N1 & " " & "Fichiers"
    MsgBox listeFichiers.Count & " fichiers traités en " & Round(Timer - startTime, 2) & " secondes.", vbInformation

End Sub

'##################################################################'
' Importation des données de l'année N-2 fichiers Excel            '
'##################################################################'

Private Sub STAT_N2_Click()
    Dim dossier As String
    Dim listeFichiers As Collection
    Dim fichier As Variant
    Dim keyKL2 As String
    Dim xlApp As Object
    Dim wb As Object
    Dim ws As Object
    Dim i As Long, j As Long
    Dim rowCount As Long, colCount As Long
    Dim chemin As String
    Dim elements() As String
    Dim produit As String
    Dim reseau_dist As String
    Dim startTime As Double
    Dim t As Long
    startTime = Timer
    
    Set tabFinal2 = CreateObject("Scripting.Dictionary")
    
    With Application.FileDialog(msoFileDialogFolderPicker)
        .Title = "Sélectionnez le dossier contenant les fichiers Excel"
        If .Show <> -1 Then Exit Sub
        dossier = .SelectedItems(1)
    End With
    
    Set listeFichiers = New Collection
    Call ParcourirDossier(dossier, listeFichiers)

    Set xlApp = Application
    ReDim tab_Key2(1 To listeFichiers.Count)
    
    For Each fichier In listeFichiers
        chemin = fichier
        elements = Split(chemin, "\")
        
        feuille2 = elements(UBound(elements))
        feuille2 = Replace(feuille, ".xlsx", "")
        produit = elements(UBound(elements) - 1)
        reseau_dist = elements(UBound(elements) - 2)
        
        keyKL2 = reseau_dist & "_" & produit & "_" & feuille2
        t = t + 1
        tab_Key2(t) = keyKL2
        
        On Error Resume Next
        Set wb = xlApp.Workbooks.Open(chemin, ReadOnly:=True)
        If wb Is Nothing Then
            MsgBox "Impossible d'ouvrir le fichier : " & chemin, vbCritical
            GoTo NextFile
        End If
        On Error GoTo 0
        
        For Each ws In wb.Sheets
            If ws.UsedRange.Cells.Count > 0 Then Exit For
        Next
        
        rowCount = ws.UsedRange.Rows.Count
        colCount = ws.UsedRange.Columns.Count
        
        Dim dataIJ() As Variant
        ReDim dataIJ(1 To rowCount, 1 To colCount)
        
        ' Lire les données
        For i = 1 To rowCount
            For j = 1 To colCount
                dataIJ(i, j) = ws.Cells(i, j).Value
            Next j
        Next i
        
        tabFinal2(keyKL2) = dataIJ
        
        wb.Close SaveChanges:=False
        
NextFile:
    Next
    nb_fichier_N2 = listeFichiers.Count
    Nombre_2.Caption = nb_fichier_N2 & " " & "Fichiers"
    MsgBox listeFichiers.Count & " fichiers traités en " & Round(Timer - startTime, 2) & " secondes.", vbInformation
    
End Sub

' Fonction pour parcourir les fichiers Excel dans un dossier et sous-dossiers
Private Sub ParcourirDossier(ByVal dossier As String, ByRef listeFichiers As Collection)
    Dim fso As Object
    Dim dossierObj As Object
    Dim fichierObj As Object
    Dim sousDossierObj As Object
    
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set dossierObj = fso.GetFolder(dossier)
    
    ' Ajouter les fichiers Excel
    For Each fichierObj In dossierObj.Files
        If (LCase(fso.GetExtensionName(fichierObj.Name)) = "xlsx" Or LCase(fso.GetExtensionName(fichierObj.Name)) = "xls") And Not LCase(fichierObj.Name) Like "~$*" Then
            listeFichiers.Add fichierObj.Path
        End If
    Next
    
    ' Parcourir les sous-dossiers
    For Each sousDossierObj In dossierObj.SubFolders
        ParcourirDossier sousDossierObj.Path, listeFichiers
    Next
End Sub

'##################################################################'
'    CONCATENATION DES TRIANGLES DE RACHAT DE N-1 ET DE N-2        '
'    CREATION DES DOSSIERS ET SAUVEGARDE DES FICHIERS CONCATENES   '
'##################################################################'


Private Sub Concatener_Click()

    Dim fso As Object
    Dim dossierBase As String
    Dim dossierSortie As String
    Dim dossierReseau As String
    Dim dossierProduit As String
    Dim xlApp As Object
    Dim wb As Object
    Dim ws As Object
    Dim t As Long
    Dim i As Long, j As Long
    Dim dataIJ As Variant
    Dim key As String
    Dim cheminFichier As String

    Min_Annee = 1984
    Max_Annee = 2023
    nb_an = (Max_Annee - Min_Annee) + 3

    Dim rowCount1 As Long, colCount1 As Long
    Dim rowCount2 As Long, colCount2 As Long
    Dim data1 As Variant, data2 As Variant

    ' Vérifier que les dictionnaires existent
    If tabFinal Is Nothing Or tabFinal2 Is Nothing Then
        MsgBox "Les données des années N-1 ou N-2 ne sont pas chargées.", vbCritical
        Exit Sub
    End If

    ' Concaténation des tableaux
    For t = 1 To nb_fichier_N1
        key = tab_Key1(t)
        
        ' Vérifier si la clé existe dans tabFinal
        If tabFinal.Exists(key) Then
            ' Extraire le tableau
            data1 = tabFinal(key)
            rowCount1 = UBound(data1, 1)
            colCount1 = UBound(data1, 2)
            
            ' Vérifier si la clé existe dans tabFinal2
            If tabFinal2.Exists(key) Then
                data2 = tabFinal2(key)
                rowCount2 = UBound(data2, 1)
                colCount2 = UBound(data2, 2)
                
                ' Parcourir les cellules
                For i = 2 To Application.Min(rowCount1, nb_an - 1)
                    For j = 3 To Application.Min(colCount1, nb_an)
                        If i <= rowCount2 And j <= colCount2 Then
                            If data1(i, j) = "" And data2(i, j) <> "" Then
                                data1(i, j) = data2(i, j)
                            End If
                        End If
                    Next j
                Next i
                
                tabFinal(key) = data1
            End If
        End If
    Next t
    
    MsgBox "Concaténation terminée.", vbInformation


    ' Debut de la sauvegarde dans un dossier
    Set fso = CreateObject("Scripting.FileSystemObject")
    
    ' Défini le dossier de base (même répertoire que le dossier d'entrée)
    dossierBase = dossier
    dossierSortie = fso.BuildPath(dossierBase, "Fichiers_Concatenes")
    
    ' Créer le dossier de sortie s'il n'existe pas
    If Not fso.FolderExists(dossierSortie) Then
        fso.CreateFolder dossierSortie
    End If
    
    Set xlApp = Application
    
    ' Parcourir chaque clé dans tabFinal
    For t = 1 To nb_fichier_N1
        key = tab_Key1(t)
        ' Créer le dossier réseau
        dossierReseau = fso.BuildPath(dossierSortie, nom_reseau(t))
        If Not fso.FolderExists(dossierReseau) Then
            fso.CreateFolder dossierReseau
        End If
        
        ' Créer le dossier produit
        dossierProduit = fso.BuildPath(dossierReseau, nom_produit(t))
        If Not fso.FolderExists(dossierProduit) Then
            fso.CreateFolder dossierProduit
        End If
        
        ' Créer un nouveau classeur Excel
        Set wb = xlApp.Workbooks.Add
        Set ws = wb.Sheets(1)
        
        ' Récupérer les données concatenées
        dataIJ = tabFinal(key)
        
        ' Écrire les données dans la feuille
        For i = LBound(dataIJ, 1) To UBound(dataIJ, 1)
            For j = LBound(dataIJ, 2) To UBound(dataIJ, 2)
                ws.Cells(i, j).Value = dataIJ(i, j)
            Next j
        Next i
    
        ' Récupérer le nom de la feuille sans l'extension
        Dim feuille As String
        feuille = nom_Feuille(t)
    
        ' Définir le chemin du fichier de sortie
        cheminFichier = fso.BuildPath(dossierProduit, feuille & ".xlsx")
        ' Sauvegarder et fermer le classeur
        wb.SaveAs cheminFichier
        wb.Close SaveChanges:=False
    
NextKey:
    Next t
    
    MsgBox "Fichiers concaténés sauvegardés dans : " & dossierSortie, vbInformation

End Sub



'##################################################################'
'    Choix du moule et préparation des inputs et Importation       '
'##################################################################'


Private Sub importer_Click()
' calcul des statistiques rechapitulatives des rachats de l'année N-1


'# Combine toutes les feuilles indépendantes d'un produit en une seule feuille en laissant un espace de 2 lignne par tableau qui sera nommé par le nom du produit
' Dans le mm classeur on reitere la mm chose pour tous les produits.    Ce classeur  prendra le nom du reseau lui appartenant
'Chaque classeur represente le reseau de distibution
' Pour finir tous les classeurs finaux sont stocké dans un dossier mommé 'resultat'

' Recap PM_Ouv pour chaque produits
Min = 1985
Dim Recap() As Variant
ReDim Recap(1 To nb_an, 1 To 9)

Recap(1, 1) = "génération"
Recap(1, 2) = "nb_contrats"
Recap(1, 3) = "PM_ouv"
Recap(1, 4) = "Tx de RP( en nbr)"
Recap(1, 5) = "Tx de RP ( en mt)"
Recap(1, 6) = "RP"
Recap(1, 7) = "Tx de RT (en nbr)"
Recap(1, 8) = "Tx de RT (en mt)"
Recap(1, 9) = "RT"

For i = 2 To nb_an
    Recap(i, 1) = Min + i - 1
Next i


For t = 1 To nb_fichier_N1

X = tab_CLE(t)

' Tableau recap

For i = 2 To nb_an - 1
    Recap(i, 2) = tabFinal(X & "_" & "PMOUV_POL")(i, 2)
    Recap(i, 3) = tabFinal(X & "_" & "PMOUV_POL")(i, nb_an - 1)
    Recap(i, 4) = tabFinal(X & "_" & "TX_RP_NB_POL")(i, nb_an - 1)
    Recap(i, 5) = tabFinal(X & "_" & "TX_RP_MT_POL")(i, nb_an - 1)
    Recap(i, 6) = tabFinal(X & "_" & "RP_POL")(i, nb_an - 1)
    Recap(i, 7) = tabFinal(X & "_" & "TX_RT_NB_POL")(i, nb_an - 1)
    Recap(i, 8) = tabFinal(X & "_" & "TX_RT_MT_POL")(i, nb_an - 1)
    Recap(i, 9) = tabFinal(X & "_" & "RT_POL")(i, nb_an - 1)
Next i


'For n = 2 To 14
'Nom = nom_Feuille(n)
'Dim Nom() As Variant
'ReDim Nom(1 To nb_an, 1 To 9)
'For i = 2 To nb_an - 1
'   For j = 2 To nb_an - 1
'    Nom(1, j) = j - 1
'    Nom(i, j) = tabFinal(X & "_" & Nom)(i, j)
'   Next j
'Next i
'Next n

    
' Tableau Pm_ouv Par Annéé

For i = 2 To nb_an - 1
   For j = 2 To nb_an - 1
    Pm_ouv(1, j) = j - 1
    Pm_ouv(i, j) = tabFinal(X & "_" & "PMOUV_POL")(i, j)
   Next j
Next i

' Tableau Nombre de rachat partiel en nombre par année police

For i = 2 To nb_an - 1
   For j = 2 To nb_an - 1
    NBRP_POL(1, j) = j - 1
    NBRP_POL(i, j) = tabFinal(X & "_" & "NBRP_POL")(i, j)
   Next j
Next i

' Tableau Taux de rachat partiel en nombre par année police

For i = 2 To nb_an - 1
   For j = 2 To nb_an - 1
    TX_RP_NB_POL(1, j) = j - 1
    TX_RP_NB_POL(i, j) = tabFinal(X & "_" & "TX_RP_NB_POL")(i, j)
   Next j
Next i

' Tableau Taux de rachat partiel en montant par année police

For i = 2 To nb_an - 1
   For j = 2 To nb_an - 1
    TX_RP_MT_POL(1, j) = j - 1
    TX_RP_MT_POL(i, j) = tabFinal(X & "_" & "TX_RP_MT_POL")(i, j)
   Next j
Next i

' Tableau Rachat partiel moyen par année police

For i = 2 To nb_an - 1
   For j = 2 To nb_an - 1
    RP_MOY_POL(1, j) = j - 1
    RP_MOY_POL(i, j) = tabFinal(X & "_" & "RP_MOY_POL")(i, j)
   Next j
Next i


' Tableau Rachats partiels par année police

For i = 2 To nb_an - 1
   For j = 2 To nb_an - 1
    RP_POL(1, j) = j - 1
    RP_POL(i, j) = tabFinal(X & "_" & "RP_POL")(i, j)
   Next j
Next i


' Tableau Nombre de rachat total en nombre par année police

For i = 2 To nb_an - 1
   For j = 2 To nb_an - 1
    NBRT_POL(1, j) = j - 1
    NBRT_POL(i, j) = tabFinal(X & "_" & "NBRT_POL")(i, j)
   Next j
Next i


' Tableau Taux de rachat total en nombre par année police

For i = 2 To nb_an - 1
   For j = 2 To nb_an - 1
    TX_RT_NB_POL(1, j) = j - 1
    TX_RT_NB_POL(i, j) = tabFinal(X & "_" & "TX_RT_NB_POL")(i, j)
   Next j
Next i


' Tableau Taux de rachat total en montant par année police

For i = 2 To nb_an - 1
   For j = 2 To nb_an - 1
    TX_RT_MT_POL(1, j) = j - 1
    TX_RT_MT_POL(i, j) = tabFinal(X & "_" & "TX_RT_MT_POL")(i, j)
   Next j
Next i

' Tableau Rachat total moyen par année police

For i = 2 To nb_an - 1
   For j = 2 To nb_an - 1
    RT_MOY_POL(1, j) = j - 1
    RT_MOY_POL(i, j) = tabFinal(X & "_" & "RT_MOY_POL")(i, j)
   Next j
Next i


' Tableau Rachats totaux par année police

For i = 2 To nb_an - 1
   For j = 2 To nb_an - 1
    RT_POL(1, j) = j - 1
    RT_POL(i, j) = tabFinal(X & "_" & "RT_POL")(i, j)
   Next j
Next i


' Tableau PMcomplet(PMouv+PP+VLP+VL) ouverture par année police

For i = 2 To nb_an - 1
   For j = 2 To nb_an - 1
    PMCOMPLET_POL(1, j) = j - 1
    PMCOMPLET_POL(i, j) = tabFinal(X & "_" & "PMCOMPLET_POL")(i, j)
   Next j
Next i

' Nombre de contrats par année calendaire

For i = 2 To nb_an - 1
   For j = 2 To nb_an - 1
    NBCTR_POL(1, j) = j - 1
    NBCTR_POL(i, j) = tabFinal(X & "_" & "NBCTR_POL")(i, j)
   Next j
Next i

Next t


####################################################################################################



Private Sub importer_Click()
    ' Calcul des statistiques récapitulatives des rachats de l'année N-1 et combinaison des feuilles par produit/réseau
    
    Dim fso As Object
    Dim xlApp As Object
    Dim wb As Object
    Dim ws As Object
    Dim dossierBase As String
    Dim dossierResultat As String
    Dim dossierReseau As String
    Dim cheminFichier As String
    Dim t As Long, i As Long, j As Long, k As Long
    Dim Recap() As Variant
    Dim dataIJ As Variant
    Dim key As String
    Dim currentRow As Long
    Dim uniqueReseaux As Object
    Dim uniqueProduits As Object
    Dim produit As String
    Dim reseau As String
    Dim feuille As String
    
    ' Définir les années
    Min_Annee = 1985
    Max_Annee = 2023
    nb_an = (Max_Annee - Min_Annee) + 3
    
    ' Vérifier que les données sont chargées
    If tabFinal Is Nothing Then
        MsgBox "Les données de l'année N-1 ne sont pas chargées.", vbCritical
        Exit Sub
    End If
    
    ' Initialiser le FileSystemObject
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set xlApp = Application
    
    ' Définir le dossier de base et le dossier resultat
    dossierBase = ThisWorkbook.Path ' Ou utiliser le dossier d'entrée défini précédemment
    dossierResultat = fso.BuildPath(dossierBase, "resultat")
    If Not fso.FolderExists(dossierResultat) Then
        fso.CreateFolder dossierResultat
    End If
    
    ' Créer un dictionnaire pour les réseaux et produits uniques
    Set uniqueReseaux = CreateObject("Scripting.Dictionary")
    Set uniqueProduits = CreateObject("Scripting.Dictionary")
    
    ' Identifier les réseaux et produits uniques
    For t = 1 To nb_fichier_N1
        reseau = nom_reseau(t)
        produit = nom_produit(t)
        If Not uniqueReseaux.Exists(reseau) Then
            uniqueReseaux.Add reseau, CreateObject("Scripting.Dictionary")
        End If
        If Not uniqueReseaux(reseau).Exists(produit) Then
            uniqueReseaux(reseau).Add produit, True
        End If
    Next t
    
    ' Parcourir chaque réseau
    For Each reseau In uniqueReseaux.Keys
        ' Créer un nouveau classeur pour le réseau
        Set wb = xlApp.Workbooks.Add
        Set ws = wb.Sheets(1)
        ws.Name = "Temp" ' Feuille temporaire pour éviter les erreurs
        
        ' Parcourir chaque produit du réseau
        For Each produit In uniqueReseaux(reseau).Keys
            ' Créer une nouvelle feuille pour le produit
            Set ws = wb.Sheets.Add(After:=wb.Sheets(wb.Sheets.Count))
            ws.Name = produit
            currentRow = 1
            
            ' Initialiser le tableau Recap pour ce produit
            ReDim Recap(1 To nb_an, 1 To 9)
            Recap(1, 1) = "génération"
            Recap(1, 2) = "nb_contrats"
            Recap(1, 3) = "PM_ouv"
            Recap(1, 4) = "Tx de RP (en nbr)"
            Recap(1, 5) = "Tx de RP (en mt)"
            Recap(1, 6) = "RP"
            Recap(1, 7) = "Tx de RT (en nbr)"
            Recap(1, 8) = "Tx de RT (en mt)"
            Recap(1, 9) = "RT"
            
            For i = 2 To nb_an
                Recap(i, 1) = Min_Annee + i - 2
            Next i
            
            ' Parcourir toutes les feuilles associées à ce produit
            For t = 1 To nb_fichier_N1
                If nom_reseau(t) = reseau And nom_produit(t) = produit Then
                    key = tab_Key1(t)
                    feuille = nom_Feuille(t)
                    
                    ' Écrire le nom de la feuille comme titre
                    ws.Cells(currentRow, 1).Value = feuille
                    currentRow = currentRow + 1
                    
                    ' Récupérer les données
                    dataIJ = tabFinal(key)
                    
                    ' Écrire les données dans la feuille
                    For i = LBound(dataIJ, 1) To UBound(dataIJ, 1)
                        For j = LBound(dataIJ, 2) To UBound(dataIJ, 2)
                            ws.Cells(currentRow + i - 1, j).Value = dataIJ(i, j)
                        Next j
                    Next i
                    
                    ' Mettre à jour Recap pour ce produit
                    If InStr(key, "PMOUV_POL") > 0 Then
                        For i = 2 To nb_an - 1
                            Recap(i, 2) = dataIJ(i, 2) ' nb_contrats
                            Recap(i, 3) = dataIJ(i, nb_an - 1) ' PM_ouv
                        Next i
                    ElseIf InStr(key, "TX_RP_NB_POL") > 0 Then
                        For i = 2 To nb_an - 1
                            Recap(i, 4) = dataIJ(i, nb_an - 1) ' Tx de RP (en nbr)
                        Next i
                    ElseIf InStr(key, "TX_RP_MT_POL") > 0 Then
                        For i = 2 To nb_an - 1
                            Recap(i, 5) = dataIJ(i, nb_an - 1) ' Tx de RP (en mt)
                        Next i
                    ElseIf InStr(key, "RP_POL") > 0 Then
                        For i = 2 To nb_an - 1
                            Recap(i, 6) = dataIJ(i, nb_an - 1) ' RP
                        Next i
                    ElseIf InStr(key, "TX_RT_NB_POL") > 0 Then
                        For i = 2 To nb_an - 1
                            Recap(i, 7) = dataIJ(i, nb_an - 1) ' Tx de RT (en nbr)
                        Next i
                    ElseIf InStr(key, "TX_RT_MT_POL") > 0 Then
                        For i = 2 To nb_an - 1
                            Recap(i, 8) = dataIJ(i, nb_an - 1) ' Tx de RT (en mt)
                        Next i
                    ElseIf InStr(key, "RT_POL") > 0 Then
                        For i = 2 To nb_an - 1
                            Recap(i, 9) = dataIJ(i, nb_an - 1) ' RT
                        Next i
                    End If
                    
                    ' Ajouter 2 lignes d'espace
                    currentRow = currentRow + UBound(dataIJ, 1) + 2
                End If
            Next t
            
            ' Ajouter le tableau Recap à la fin de la feuille
            ws.Cells(currentRow, 1).Value = "Récapitulatif"
            currentRow = currentRow + 1
            For i = LBound(Recap, 1) To UBound(Recap, 1)
                For j = LBound(Recap, 2) To UBound(Recap, 2)
                    ws.Cells(currentRow + i - 1, j).Value = Recap(i, j)
                Next j
            Next i
        Next produit
        
        ' Supprimer la feuille temporaire
        Application.DisplayAlerts = False
        wb.Sheets("Temp").Delete
        Application.DisplayAlerts = True
        
        ' Sauvegarder le classeur
        cheminFichier = fso.BuildPath(dossierResultat, reseau & ".xlsx")
        wb.SaveAs cheminFichier
        wb.Close Save­

Changes:=False
    Next reseau
    
    MsgBox "Traitement terminé. Les classeurs sont sauvegardés dans : " & dossierResultat, vbInformation
End Sub







########################################################


End Sub






Sub CreerGraphiqueRachatsAvecAxesCorrects()

    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets("Feuil1") ' Changez le nom de la feuille si nécessaire

    Dim chartObj As ChartObject
    Set chartObj = ws.ChartObjects.Add(Left:=100, Width:=800, Top:=50, Height:=450)
    
    Dim chart As Chart
    Set chart = chartObj.Chart

    With chart
        .ChartType = xlColumnClustered
        
        ' PM (axe secondaire)
        .SeriesCollection.NewSeries
        With .SeriesCollection(1)
            .Values = ws.Range("A2:AN2") ' Ligne 2 : PM
            .XValues = ws.Range("A1:AN1") ' Ligne 1 : années
            .Name = "PM"
            .AxisGroup = xlSecondary
            .ChartType = xlColumnClustered
            .Format.Fill.ForeColor.RGB = RGB(0, 100, 0)
        End With

        ' Modélisation 2023
        .SeriesCollection.NewSeries
        With .SeriesCollection(2)
            .Values = ws.Range("A3:AN3")
            .XValues = ws.Range("A1:AN1")
            .Name = "Modélisation dans l'EEV 2023"
            .ChartType = xlLine
            .AxisGroup = xlPrimary
            .Format.Line.ForeColor.RGB = RGB(0, 0, 139)
        End With

        ' Stats 2023
        .SeriesCollection.NewSeries
        With .SeriesCollection(3)
            .Values = ws.Range("A4:AN4")
            .XValues = ws.Range("A1:AN1")
            .Name = "Stats 2023"
            .ChartType = xlLine
            .AxisGroup = xlPrimary
            .Format.Line.ForeColor.RGB = RGB(255, 0, 255)
        End With

        ' Stats 2022
        .SeriesCollection.NewSeries
        With .SeriesCollection(4)
            .Values = ws.Range("A5:AN5")
            .XValues = ws.Range("A1:AN1")
            .Name = "Stats 2022"
            .ChartType = xlLine
            .AxisGroup = xlPrimary
            .Format.Line.ForeColor.RGB = RGB(255, 255, 0)
        End With

        ' Titre et axes
        .HasTitle = True
        .ChartTitle.Text = "Rachats Partiels en montant"
        .Axes(xlCategory).HasTitle = True
        .Axes(xlCategory).AxisTitle.Text = "Année police"
        .Axes(xlValue).HasTitle = True
        .Axes(xlValue).AxisTitle.Text = "Taux de rachat"
        .Axes(xlValue).MaximumScale = 15 ' Échelle fixe pour le taux de rachat
        .Axes(xlValue).MinimumScale = 0

        .Axes(xlValue, xlSecondary).HasTitle = True
        .Axes(xlValue, xlSecondary).AxisTitle.Text = "Montant PM"
        .Axes(xlValue, xlSecondary).MaximumScale = 100000000 ' Ajustez selon vos données
        .Axes(xlValue, xlSecondary).MinimumScale = 0

        ' Couleur de fond
        .PlotArea.Format.Fill.ForeColor.RGB = RGB(200, 200, 200)

        ' Légende
        .Legend.Position = xlLegendPositionTop
    End With

End Sub
